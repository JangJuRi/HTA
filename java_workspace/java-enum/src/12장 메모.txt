[ 상수와 열거형 ]
	- 열거형은 여러 개의 상수를 빠르게 정의할 수 있다.
	- 열거형은 컴파일 시 값이 체크된다.
	- 열거형은 java.lang.Enum 클래스로부터 다양한 메소드를 상속받았다.
		String name()
		int ordinal()
		static T valueOf(String name)
		static T[] values()

[ 제네릭 ]
	- 다양한 타입의 객체를 다루는 클래스나 메소드에서 컴파일 시에 타입 체크를 해주는 것
	- 다양한 타입의 객체를 다루는 클래스나 메소드에서
	  객체의 타입을 소스 레벨에서 결정하지 않고, 타입 파라미터를 통해서 실행시점에 객체의 타입을 결정하는 것

	예) 객체 생성시점에 그 객체를 사용할 타입을 결정하기
	    class ArrayList<E> {
		public boolean add(E e) { ... }
		public E get(int index) { ... }
	    }
	    ArrayList<String> list = new ArrayList<String>();	// E의 타입을 String으로 결정
	    ArrayList<Product> list = new ArrayList<Product>();	// E의 타입을 Product로 결정

	예) 메소드 실행시점에 그 메소드가 사용할 타입을 결정하기
            class Arrays {
		public <T> void sort(T[] arr) { ... }
	    }
	    String[] names = {"김유신", "강감찬", "이순신"}
	    Arrays.<String>sort(names);		// <T>를 스트링으로 결정하고, String[] 배열을 전달
	    Arrays.sort(names);			// 타입추정을 통해서 전달받은 배열의 타입을 알아내고, 그 타입(String)을 <T>의 타입으로 결정

	예) 인터페이스 구현시점에 타입을 결정하기
	    interface Comparable<T> {
		public int compareTo(T other);
	    }
	    public class Product implements Comparable<Product> {
		public int comparaTo(Product other) {
			return this.no - other.no;
		}
	    }

[ 제네릭 클래스 ]
	- 타입 파라미터를 하나 이상 가지고 있는 클래스
	- 여러 종류의 객체를 다루는 클래스를 제네릭 클래스로 정의하면 타입의 안전성을 보장받고, 형변환 코드를 제거할 수 있다.
	- 제네릭 클래스 예)
		* 자료구조 (Set<E>, List<E>, Map<K, V>)
		* 데이터를 반복처리하는 것 (Iterator<E>, Enumeration<E>)
	- 제네릭 클래스 구현 시 주의사항
		* T타입의 배열을 생성할 수 없다.
		* T타입의 클래스 변수를 생성할 수 없다.
		class Box<T> {
			static T t;		// 오류, 클래스 변수를 선언할 수 없다.
			T[] data = new T[10];	// 오류, T타입의 배열은 생성할 수 없다.
			T[] data;		// 정상, T타입의 배열에 대한 변수는 선언할 수 있다.

			public Box() {
				data = (T[]) new Object[10];
			} 
		}
	- 제한된 제네릭 클래스의 정의
		* 제네릭 클래스의 타입파라미터는 객체가 한 종류의 객체만을 다루게 할 수는 있지만,
		  T에 지정할 수 있는 타입의 종류를 제한해야하는 경우에 사용된다.
		class ProductBox<T extends Product> {
			// Product 및 그 자손만 다루는 제네릭 클래스			
		}
		* ProductBox<Computer> box = new ProductBox<>();	// 정상, Computer는 Product의 자손	
		* ProductBox<SmartPhone> box = new ProductBox<>();	// 정상, SmartPhone은 Product의 자손
		* ProductBox<Student> box = new ProductBox<>();		// 오류, Student는 Person의 자손

		class FruitBox<T extends Fruit> {
			// Fruit 및 그 자손만 다루는 제네릭 클래스
		}
		class GunBox<T extends Gun> {
			// Gun 및 그 자손만 다루는 제네릭 클래스
		}

[ 와일드 카드 ]
	- 제네릭 타입에 다형성을 적용할 때 사용한다.
	- '?' 'extends', 'super'를 사용해서 다룰 객체의 상한과 하한을 지정할 수 있다.
	예) 한 종류의 제네릭 타입 참조변수로 다른 타입이 지정된 객체를 다루기
	ArrayList<? extends Product> list = new ArrayList<Tv>();
	ArrayList<? extends Product> list = new ArrayList<SmartPhone>();
	* list 참조변수는 Product 및 그 자손이 제네릭타입으로 지정된 ArrayList를 참조할 수 있다.

	예) 메소드의 매개변수에서 와일드카드 사용하기
	public void 전공과정등록(Course<? extends Student> course) { ... }
	* Course<Student> c = new Course<>();
	* Course<CollegeStudent> c = new Course<>();
	* Course<PostGraduatedStudent> c = new Course<>();
	* 위의 3개 과정은 전공과정등록() 메소드의 매개변수에 전달할 수 있는 과정이다.

	public void 대학원과정등록(Course<? extends PostGraduatedStudent> course) { ... }
	* Course<PostGraduatedStudent> c = new Course<>();
	* 위의 과정은 전공과정등록() 메소드의 매개변수에 전달할 수 있는 과정이다.

	public void 직장인및일반인과정등록(Course<? super Worker> course) { ... }
	* Course<Worker> c = new Course<>();
	* Course<Person> c = new Course<>();
	* 위의 2개 과정은 전공과정등록() 메소드의 매개변수에 전달할 수 있는 과정이다.

	* 상속관계
		Person - Student - CollegeStudent
				 - PostGraduatedStudent
		       - Worker  

[ 제네릭 메소드 ]
	- 메소드의 선언부에 타입파라미터가 선언된 메소드다.
	예) 
	class Box<T> {
		public void add(T t) { ... }		// 제네릭 메소드 아님
		public T get(int index) { ... }		// 제네릭 메소드 아님

		public <T> T[] toArray(T[] arr) { ... }	// 제네릭 메소드
		* 이 메소드의 선언부에 <T>와 같은 타입파라미터 정의가 있어야된다.
		* 이 메소드의 T는 Box<T>와 아무 상관이 없다.
		* 이 메소드의 T는 메소드 실행 시 전달된 배열의 타입에 전적으로 의존한다.
	}

	class Arrays {
		public static <T> void sort(T[] arr) { ... }	// 제네릭 메소드
		* 제네릭 메소드는 제네릭 클래스가 아닌 곳에서도 정의할 수 있다.
		* sort() 메소드 실행 시 전달받은 배열의 타입이 T의 타입이 된다.
		* Arrays.sort(new String[]{"김유신", "강감찬"});	--> <T>는 <String>이 된다.
	}
	class ApplicationContext {
		public <T> T getBean(String beanName, class<T> clazz) { ... }
		* getBean() 메소드 실행 시 전달받은 객체의 설계도 타입이 T의 타입이 된다.
		* ctx.getBean("service", UserService.class)	--> <T>는 <UserService>가 된다.
	}

[ 열거형 ]
	- 여러 개의 상수를 빠르게 정의할 수 있다.
	- 열거형의 정의
		enum 열거형 이름 {
			상수명, 상수명, 상수명, ...
		}
	- 작성 예)
		enum CustomerGrade {
			BRONZE, SILVER, GOLD, VIP, VVIP
			* 각각의 항목은 CustomerGrade의 상수가 된다.
			* 각각의 항목은 정의된 순서대로 0부터 시작하는 순서값을 가진다.
		}

[ 열거형의 사용 ]
	public class Customer {
		private String name;
		private String email;
		private CustomerGrade grade;	// 열거형의 상수값을 담는 필드

		public void setGrade(CustomerGrade grade) {
			this.grade = grade;
		}
		public CustomerGrade getGrade() {
			return grade;
		}
	}
	
	Customer c1 = new Customer("김유신", "kim@gmail.com", CustomerGrade.VIP);
	Customer c2 = new Customer("강감찬", "kang@gmail.com", CustomerGrade.BRONZE);

	* 대입연산에서 사용하기;
	CustomerGrade grade = CustomerGrade.VIP;

	* 비교연산에서 사용하기
	if(c1.getGrade() == c2.getGrade()) { ... }	// 열거형의 상수값은 == 연산자로 비교할 수 있다.

[ 멤버를 가진 열거형 ]
	enum Grade {
		// 해당 등급 고객의 최소 적립률(% 단위)
		BRONZE(1), SILVER(2), GOLD(5), VIP(10), VVIP(30);

		private final int point;	// 상수 값이어서 값이 초기화된 이후에는 변경할 수 없도록 final로 정의
		Grade(int point) {		// 생성자의 접근제한자는 private만 사용가능하다.
			this.point = point;
		}
		public int getPoint() {		// 상수 값을 반환하는 getter 메소드다. setter는 정의할 필요 없다.
			return point;
		}

[ 멤버를 가진 열거형의 사용 ]
	public class Customer {
		private String name;
		private String email;
		private Grade grade;

		// 생성자, getter/setter는 지면상 생략
	}

	Customer c1 = new Customer("홍길동", "hong@gmail.com", Grade.BRONZE);
	Customer c2 = new Customer("김유신", "kim@gmail.com", Grade.GOLD);
	System.out.println("홍길동 고객의 적립률 : " + c1.getGrade().getPoint());
	}