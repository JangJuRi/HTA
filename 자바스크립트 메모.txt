Javascript
	- 개요
		- 브라우저에서 실행되는 프로그램을 개발하는 프로그램언어다.
		- 인터프리터 언어다.
		- 객체지향프로그램 언어다.
		- 함수형 언어다.

	- 가능한 작업
		- HTML 엘리먼트를 조작할 수 있다.
		- HTML 엘리먼트의 속성을 조작할 수 있다.
		- HTML 엘리먼트의 스타일(CSS)을 변경할 수 있다.
		- 사용자와 상호작용하는 프로그램을 작성할 수 있다.
		- 웹서버와 데이터교환(통신)하는 프로그램을 작성할 수 있다.(AJAX)

	- 웹페이지에 자바스크립트 포함시키기
		- Internal javascript
			<head>태그나 <body> 사이에 <script></script> 태그를 위치시키고
			<script></script>사이에 javascript 코드를 작성한다.

		- External javascript
			<head>태그나 <body> 사이에 <script src="자바스크립트소스파일"></script>를 추가하면
			자바스크립트 소스를 포함시킬 수 있다.


변수와 자료형
	- 변수의 선언과 초기화
		변수의 선언
			var 변수명;

		변수의 선언과 초기화
			var 변수명 = 값;

		여러 개의 변수 한 번에 선언
			var 변수명, 변수명, 변수명, 변수명;

		여러 개의 변수 한번에 선언과 초기화
			var 변수명 = 값, 변수명 = 값, 변수명 = 값;
			* 값의 타입이 달라도 상관없음

		* 초기화되지 않는 변수는 항상 undefined를 값으로 가진다.

		* 변수의 이름으로 사용가능한 문자
			영어 대소문자, $, _, 숫자

		* 자바스크립트의 변수는 저장되는 값에 따라서 변수의 타입이 동적으로 변한다.

	- 자료형
		* 자료형의 종류
			string, number, boolean, undefined, array, object, function

		* string
			문자열
			var x = "안녕";
			var x = '안녕';

		* number
			정수, 실수
			var x = 10;
			var x = 3.14;

		* boolean
			true, false
			var x = true;
			var x = false;
			* 자바스크립트에서 거짓으로 판정되는 것
				false, '', 0, undefined, null, Nan
			* 자바스크립트에서 참으로 판정되는 것
				true, 위의 6개를 제외한 모든 값

		* undefined
			undefined
			var x;

		* array
			배열(자바의 List와 유사)
			var x = [10, 20, 30];
			var x = ["김유신", "강감찬", "홍길동"];
			var x = [10, "홍길동", "010-1234-5678", false];
			* 서로 다른 타입의 값을 하나의 배열에 담을 수 있다.
			* 배열의 크기가 가변적이다.

		* object
			객체(자바의 Map과 유사)
			이름:값의 쌍으로 구성된다.
			var x = {name    :"홍길동",
				 tel     :"010-1234-5678",
				 married :false,
				 age     :40,
				 careers :['편의점알바', '건설현장', '가구공장'],
				 car     :{name:'아반떼', year:2018, distance:56000}};

			* 객체 생성을 위한 별도의 설계도가 필요하지 않다.
			* 객체의 구성요소를 프로그램 실행 중에 자유롭게 추가/삭제할 수 있다.

		* function
			함수(자바의 메소드와 유사)
			코드의 블록
			var x = function() {
				alert("안녕");
			}

	- 연산자
		산술 연산자
			+ - * / % ++ --

		대입 연산자
			= += -= *= /= %=

		비교 연산자
			==   ===   !=   !==   >   >=   <   <=

		논리 연산자
			&&   ||   !

		삼항 연산자
			? : 

	- 함수
		- 스크립트 프로그램에서 자주 사용되는 코드를 재사용하기 위해서 정의하는 것
		- 자바스크립트의 함수는 부분적인 작업을 수행하도록 구현된 이름있는 코드블록이다.
		- 형식
			function 함수명(매개변수명, 매개변수명, 매개변수명, ...) {
				수행문;
				수행문;
			}
			* 반환타입을 정의하지 않는다.
			* 매개변수의 타입을 정의하지 않는다.
			* return문이 없는 모든 함수는 undefined를 반환한다.
			* return문이 있는 함수는 해당 값을 반환한다.
			* 함수중복정의를 허용하지 않는다.
			* 자바스크립트의 함수는 1급시민이다.
			  (함수는 반환값으로 사용할 수 있다.
			   함수를 매개변수로 전달할 수 있다.
			   함수를 변수에 저장할 수 있다.)

		- 어디서 사용하는가?
			* 이벤트가 발생했을 때 이벤트 처리
			* 자바스크립트 코드에서 함수에 구현된 기능을 사용하기 위해
			* 페이지로딩 시 자동으로 실행될 작업의 구현을 위해

	- 배열
		- 같은 타입 혹은 서로 다른 타입의 값, 객체를 순서대로 저장하는 자료구조다.
		- 값이 저장되면 순서대로 인덱스가 부여된다.
		- 가변길이 배열이다.
		- 배열 생성 및 조작
			* 배열의 생성
				var x = [];	// 길이 0인 배열 생성
				var x = ["홍길동", "김유신", "강감찬"];

			* 배열의 값 조회
				var x = [10, 20, 30];
				console.log(X[0]);
				console.lof(x[1]);

			* 배열의 값 변경 및 추가
				var x = [100];	// 배열의 길이가 1인 배열
				x[0] = 200;	// 배열의 0번째 값 변경
				x[1] = 500;	// 배열의 길이가 1 증가되고, 배열의 1번째에 값 저장
				x[100] = 1000;	// 배열의 길이가 필요한 만큼 등가되고, 배열의 100번째에 값 저장
				
			* 배열의 길이 조회 및 변경
				var x = [100, 200, 300];
				var 배열의길이 = x.length;
				x.length = 100;	// 배열의 길이가 100인 배열로 길이가 변함

	- 객체
		- key:value의 쌍으로 구성된 값을 가진다.
		  * value는 숫자, 문자열, 불린값, 배열, 다른 객체, 함수 모두 가능하다.

		- 프로퍼티와 메소드를 가질 수 있다.
		  * key:value에서 value가 함수가 아닐 때 프로퍼티가 된다.
		  * key:value에서 value가 함수일 때 메소드가 된다.

		- 객체 생성 후에도 프로퍼티와 메소드를 자유롭게 추가/삭제할 수 있다.
		- 문자열, 숫자, 불린형의 값도 객체가 될 수 있다.
		
		- 객체의 생성 및 조작
			* 객체 생성
				var x = {};	// 프로퍼티, 메소드가 없는 빈 객체
				var x = {tagName:"P", textContent:"안녕"}

			* 객체 생성 후 프로퍼티 추가하기
				var x = {name:"홍길동"};
				x.name = "김유신";	     // 프로퍼티가 존재하는 경우 값이 변경됨
				x.id = "kim";		     // 프로퍼티가 없으면 새로 추가됨
				x["email"] = "kim@gmail.com" // [] 기호를 사용할 수 있다.

			* 객체의 구성요소(프로퍼티, 메소드) 삭제하기
				var x = {name:"홍길동", age:50};
				delete x.age;	// x가 참조하는 객체의 age 프로퍼티를 삭제한다.

		- 생성자 함수를 이용한 객체 생성
			- 생성자 함수는 new 키워드와 같이 사용되는 함수다.
			- 생성자 함수는 다른 함수와 구별하기 위해 함수명을 대문자로 시작한다.
			- 생성자 함수는 객체의 구성요소를 함수안에서 정의하고 초기화한다.
			- 작성예)

				var x = new Employee();
				1. new 키워드는 빈 객체를 생성한다.
				2. 생성자함수를 실행하면서, 생성자함수의 this에 1번에서 생성한 객체를 전달한다.
				3. 생성자함수의 수행문이 실행되면서 전달받은 객체(this)에 프로퍼티와 메소드를 추가한다.
				4. 생성자함수의 실행이 완료되면 x에 전달받은 객체(this)가 반환된다.
				5. console.log(x.id);

				function Employee(id, name, salary, commission, dept) {
					// 매개변수 id로 전달받은 값을 this가 가지고 있는 객체의 id 프로퍼티에 대입시킨다.
					this.id = id;
					this.name = name;
					this.salary = salary;
					this.commission = commission;
					this.dept = dept;
					this.displayInfo = function() {
					console.log("아이디", this.id, "이름", this.name, "급여", this.salary, "커미션", this.commission, "소속부서", this.dept)
					}
				}
			
		
		var emp1 = new Employee(100, "홍길동", 23000, 0, "기술부");
		var emp2 = new Employee(120, "김유신", 26000, 0.2, "영업부");
		console.log(emp1);
		console.log(emp2);
		emp1.displayInfo();
		emp2.displayInfo();


HTML DOM(Document Object Model)
	- HTML 문서객체모델
	- HTML 문서를 엑세스(HTML문서의 엘리먼트, 속성, 컨텐츠 등을 조회/추가/삭제/변경)하는 표준을 정의하고 있다.
	- DOM은 W3C에서 그 표준을 정의하고 있고, 브라우저 제조사, 프로그램언어 개발사, 라이브러리 개발자들이 구현을 담당하고 있다.
	- 브라우저나 프로그램언어의 종류에 상관없이 HTML 문서를 엑세스하는 방법은 동일하다.



DOM의 주요객체
	- Document 객체
		* HTML 문서를 포현하는 객체다.
		* 웹브라우저가 HTML문서를 로딩하고, 해석해서 Document객체를 생성한다.
		* 생성된 Document객체는 전역객체(Window)의 document 프로퍼티에 저장된다.
		* 현재 HTML 문서의 모든 태그에 대한 Element객체가 포함되어있다. 
		* 브라우저 내장객체(document)로 제공된다.
		
		* 주요 메소드
			Element        document.getElementById("아이디")
			Element        document.querySelector("CSS선택자")
			HTMLCollection document.getElementsByTagName("태그명")
			HTMLCollection document.getElementsByClassName("클래스명")
			HTMLCollection document.querySelectorAll("CSS선택자")

	- Element 객체
		* HTML 문서의 태그를 표현하는 객체다.
		* 태그의 이름, 태그의 속성, 태그의 컨텐츠를 포함하고 있다.
		* 자바스크립트로 HTML 문서를 조작하는 경우 주요 프로그래밍 대상이다.

		* 엘리먼트객체를 반환하는 메소드
			- Element document.getElementById("아이디")
			- Element document.querySelector("CSS선택자")

		* 엘리먼트의 주요 프로퍼티와 주요 메소드
			- 주요 프로퍼티
				* 공통 프로퍼티
					id		엘리먼트의 아이디
					innerHTML	엘리먼트의 HTML 컨텐츠
					textContent	엘리먼트의 텍스트 컨텐츠
					style		엘리먼트의 CSS정보를 담고 있는 객체

				* 폼 입력요소의 프로퍼티(input, select, textarea 태그만 가지고 있는 프로퍼티)
					value		모든 input, select, textarea 엘리먼트의 값을 조회/변경
					disabled	모든 input, select, textarea 엘리먼트의 활성화/비활성화 변경
					readonly	모든 input, select, textarea 엘리먼트의 읽기전용여부 변경
					checked		모든 체크박스, 라디오버튼의 체크해제여부 변경
					options		select 엘리먼트의 모든 option 엘리먼트를 담고 있다.
					selectedIndex	select 엘리먼트에서 지금 선택된 option의 순번을 담고 있다.(0부터 시작)

			- 주요 메소드
				* 자식 엘리먼트 조회
					HTMLCollection 엘리먼트.getElementsByTagName("태그명")
					HTMLCollection 엘리먼트.getElementsByClassName("클래스명")
					Element        엘리먼트.querySelector("CSS선택자")
					HTMLCollection 엘리먼트.querySelectorAll("CSS선택자")

				* 속성값 조회/추가/변경/삭제
					String	       엘리먼트.getAttribute("속성명")
					undefined      엘리먼트.setAttribute("속성명", "속성값")
					undefined      엘리먼트.removeAttribute("속성명")

				* 자식 엘리먼트 추가/삭제	
					엘리먼트.appendChild(자식엘리먼트)
					엘리먼트.removeChild(자식엘리먼트)
				

	- Attribute 객체
		* HTML 태그의 속성을 표현하는 객체다.

	- HTMLCollection(혹은 NodeList) 객체
		* Element객체를 여러 개 포함할 수 있는 유사배열객체다.
		* Element를 검색할 때 태그명, 클래스명 등으로 검색하는 경우 여러 개 Element가 검색되게 되는데,
		  HTMLCollection객체에 검색된 Element가 담겨서 반환된다.

		* HTMLCollection이나 NodeList를 반환하는 메소드
			HTMLCollection document.getElementsByTagName("태그명")
			HTMLCollection document.getElementsByClassName("클래스명")
			HTMLCollection document.querySelectorAll("CSS선택자")
		* 반복처리가 필요하다.

	- Event 객체
		* 사용자가 웹 페이지와 상호작용할 때마다 엘리먼트에서 발생되는 객체다.
		  (버튼 클릭 시, 마우스를 움직일 때, 키보드 입력할 때 ...)
		* 이벤트 소스, 이벤트 이름, 이벤트처리와 관련된 메소드 등을 포함하고 있는 객체다.
		* 브라우저, HTML Document, HTML 엘리먼트가 사용자와 상호작용할 때 발생되는 객체다.

		* 이벤트의 종류
			- 마우스 이벤트
				onclick		엘리먼트를 클릭했을 때
				ondbclick	엘리먼트를 더블클릭했을 때
				onmouseenter	엘리먼트로 마우스 포인트가 진입했을 때
				onmouseleave	엘리먼트에서 마우스 포인트가 빠져나갈 때 
				onmouseover	엘리먼트 위로 마우스 포인트가 올라왔을 때 
				onmouseout	엘리먼트 밖으로 마우스 포인트가 빠져나갈 때
				onmousemove	엘리먼트 안에서 마우스 포인트가 움직일 때
				
			- 키보드 이벤트
				onkeydown	키보드를 누르기 시작할 때
				onkeypress	키보드가 완전히 눌려졌을 때
				onkeyup		키보드가 올라오기 시작할 때

			- 폼관련 이벤트
				onchange	checkbox, radio, select의 상태가 변할 때
				onselect	input, textarea에서 입력된 텍스트를 마우스로 끌어서 선택할 때
				onsubmit	폼입력값을 서벌 제출할 때(폼입력값 유효성 검증 처리)
				onreset		폼입력값을 리셋할 때

			- 화면관련 이벤트
				onload		body태그에 주로 사용하고, body태그의 모든 컨텐츠가 완전히 화면에 표시됐을 때
				onresize	브라우저의 화면 크기가 변경될 때
				onscroll	스크롤바를 위아래로 움직일 때
				onerror		웹 페이지에서 외부파일을 읽어오는 동안 에러가 발생했을 때(img, link, script태그에서 사용)

		* 이벤트 객체
			- 주요 프로퍼티
				target		이벤트가 발생한 엘리먼트를 반환한다.
				type		발생한 이벤트 이름을 반환
				pageX		마우스 이벤트가 발생한 X좌표를 반환
				pageY		마우스 이벤트가 발생한 Y좌표를 반환
				button		마우스 이벤트 발생 시 클릭한 버튼을 반환(0:left, 1:wheel, 2:right)
				which		키보드 이벤트에서 눌려진 글자의 코드값을 반환

			- 주요 메소드
				event.preventDefault()
					이벤트 발생 시 그 이벤트와 관련된 기본동작이 실행되지 않게 한다.
					* <a>클릭 시, 지정된 url로 페이지가 이동되는 것을 방해하는 것
					* submit버튼 클릭 시, 폼 입력값이 서버로 제출되는 것을 방해하는 것

				event.stopPropagation()
					* 발생한 이벤트가 부모 엘리먼트로 전파되는 것을 방지한다.

				event.stopImmediatePropagation()
					* 하나의 엘리먼트의 동일한 이벤트에 대한 이벤트 핸들러 함수가 여러개 등록되어 있는 경우
					  다른 이벤트 핸들러 함수의 실행을 방해한다.

			- 이벤트 처리하기
				* 태그에서 직접 이벤트 연결
				<button onclick="fn()">버튼</button>
				function fn() {
					수행문;
				}

				* 엘리먼트.이벤트명 = 함수명 으로 연결
				<button id="btn">버튼</button>
				function fn() {
					수행문;
				}
				var el = document.getElementById("btn");
				el.onclick = fn;

				* 엘리먼트.addEventListener("이벤트명", 함수명) 메소드 사용
				<button id="btn">버튼</button>
				function fn() {
					수행문;
				}	
				var el = document.getElementById("btn");
				el.addEventListener("click", fn);

DOM의 주요 API
	- Document 객체
		- Property
			cookie	
				* html문서의 모든 쿠키들을 name/value의 쌍으로 반환한다
			doctype
				* html문서의 형식을 문자열로 반환한다.
		- Method
			createElement("태그명")
				* 지정된 태그명의 Element 객체 생성한다.

			createAttribute("속성명", "속성값")
				* 지정된 속성정보를 가진 Attribute 객체를 생성한다.

			createTextNode("텍스트컨텐츠")
				* 지정된 텍스트내용을 가지는 TextNode객체를 생성한다.
				* 엘리먼트의 컨텐츠는 실제로는 TextNode가 가지고 있다.

			createComment("주석내용")
				* 지정된 주석내용을 가지는 Comment객체를 생성한다.

			getElementById("id")
				* 지정된 id에 해당하는 Element객체를 반환한다.

			getElementsByTagName("태그명")
				* 지정된 태그명에 해당하는 모든 Element객체를 HTMLCollection에 담아서 반환한다.

			getElementsByClassName("클래스")
				* 지정된 클래스를 가지고 있는 모든 Element객체를 HTMLCollection에 담아서 반환한다.

			querySelector("CSS선택자")
				* 지정된 선택자로 검색된 첫번째 Elemenet객체를 반환한다.

			querySelectorAll("CSS선택자")
				* 지정된 선택자로 검색된 모든 Element객체를 HTMLCollection에 담아서 반환한다.
	- Element 객체
		- Property
			tagName
				* Element의 태그명을 반환한다.
			textContent
				* Element의 텍스트 컨텐츠를 조회/변경할 수 있다.
			innerHTML
				* Element의 html 컨텐츠를 조회/변경할 수 있다.
			id	
				* Element의 id값을 반환한다.
			children
				* 모든 자식엘리먼트들을 HTMLCollection에 담아서 반환한다.
			style
				* 해당 엘리먼트의 CSS를 조회/변경할 수 있다.
				* style 프로퍼티는 
			value
				* input, select, textarea Element의 값을 조회/변경할 수 있다.
			disabled
				* input, select, textarea, button Element의 비활성화 여부를 조회/변경할 수 있다.
				* true는 비활성화, false는 활성화
			readOnly
				* input, select, textarea, button Element의 읽기전용 여부를 조회/변경할 수 있다.
				* true는 읽기전용, false는 편집가능
			checked
				* checkbox, radio Element의 비활성화 여부를 조회/변경할 수 있다.
				* true는 체크상태, false는 체그상태아님
			options
				* select Element의 모든 option Element객체를 HTMLCollection에 담아서를 반환한다.
			selectedIndex
				* select Element의 현재 선택된 옵션의 인덱스를 조회/변경할 수 있다.
				
		- Method
			getElementsByTagName("태그명")
			getElementsByClassName("클래스")
			querySelector("선택자")
			querySelectorAll("선택자")
				* Document객체에 정의된 기능과 동일한다.
				* 단, 문서전체가 아닌 해당 Element 객체 하위에서 검색한다.
				
			appendChild(Element)
				* 지정된 엘리먼트를 맨 마지막 자식노드로 추가한다.
			removeChild(Element)
				* 지정된 엘리먼트를 삭제한다.
			insertBefore(Element)
				* 지정된 엘리먼트를 첫 번째 자식노드로 추가한다.
			remove()
				* 엘리먼트를 삭제한다.

			firstChild(), firstElementChild()
				* 해당 엘리먼트의 첫번째 자식 엘리먼트를 반환한다.
			lastChild(), lastElementChild()
				* 해당 엘리먼트의 마지막 자식 엘리먼트를 반환한다.
			previousSibling(), previousElementSibling()
				* 해당 엘리먼트의 형제 중 바로 앞에 위치한 엘리먼트를 반환한다.
			nextSibling(), nextElementSibling()
				* 해당 엘리먼트의 형제 중 바로 뒤에 위치한 엘리먼트를 반환한다.
			parentNode()
				* 해당 엘리먼트의 부모 엘리먼트를 반환한다.

			getAttribute("속성명")
				* 지정된 속성명에 해당하는 속성값을 반환한다.
			setAttribute("속성명", "속성값")
				* 속성을 변경/추가한다.
			removeAttribute("속성명")
				* 속성을 삭제한다.
	- HTMLCollection 객체
		- Property
			length
				* 저장된 갯수를 반환한다.
		- Method
			item(index)
				* 인덱스 번호에 해당하는 Element객체를 반환한다.
		* 사용예
			var collections = document.getElementsByTagName("p")
			for (var i=0; i<collections.length; i++) {
				var el = collections.item(i);
				var el = collections[i];
			}
	- Event 객체
		- Property	
			target
				* 이벤트가 발생된 엘리먼트객체를 반환한다.
			type
				* 발생된 이벤트이름을 반환한다.
			dataTransfer
				* drag & drop에서 값을 전달하기 위한 객체를 반환한다.
			pageX, pageY
				* 마우스의 현재 좌표를 반환한다.
			which
				* 입력한 문자의 아스키코드값을 반환한다.
		- Method
			preventDefault()
				* 해당 엘리먼트에 특정 이벤트 발생시 실행할 기본동작이 지정되어 있는 경우
                                         그 동작의 실행을 취소시킨다.
				* <form> 태그 안에서 button, submit 버튼 클릭시 폼이 전송되는 것
				* <a> 태그 클릭시 지정된 링크로 이동하는 것
			stopPropagation()
				* 이벤트 버블링을 중지시킨다.
			stopImmediatePropagation()
				* 이벤트 버블링을 중지시킨다.



AJAX(Asynchronous Javascript And XML)
	- 자바스크립트와 XML(혹은 JSON)을 활용한 서버와의 비동기 데이터 통신
	- XMLHttpRequest 객체를 사용해서 서버와 데이터 통신을 한다.
	- 특징
		* javascript만을 사용해서 웹서버와 데이터 통신이 가능하다.
		* 페이지의 리로딩없이 화면의 일부분을 갱신하는 것이 가능하다.
		  (화면 갱신에 사용되는 데이터는 XMLHttpRequest를 사용해서 서버로부터 받아온다)
	
	- 대표적인 구현예
		* 구글 맵, 다음지도
		* 포털사이트 검색기능에서 추천검색어 표시
		* 대분류의 하위분류를 조회하는 기능
		* 아이디 중복체크 기능

	- XMLHttpRequest 객체
		* 웹서버에 요청을 보내고, 웹서버의 응답을 받는 기능이 지원되는 객체
		* javascript로 제어가능한 객체
		  (XMLHttpRequest를 사용하면 브라우저의 도움없이 javascript만으로 웹서버와 데이터 통신이 가능해진다.)

		* 주요 프로퍼티
			- readyState
				XMLHttpRequest의 현재 상태를 반환한다.
				0 : XMLHttpRequest객체 생성, 아직 초기화되지 않음
				1 : 초기화가 완료되고, 서버와 연결되었음
				2 : 서버가 XMLHttpRequest가 보낸 요청을 받았음
				3 : 서버가 요청을 처리중임
				4 : 서버가 요청처리를 끝내고, 응답데이터를 보냄

			- status
				요청에 대한 HTTP 응답코드
				200 : OK
				404 : Not Found
				500 : Server Error

			- onreadystatechange
				XMLHttpRequest의 readyState의 상태값이 변할 때 마다 발생하는 이벤트
				xhr.onreadystatechange = function() {
					readyState 값이 변할 때 마다 실행할작업
					* 요청에 대한 응답을 받아서 화면을 갱신하는 작업 수행
					* readyState가 4, status가 200인 경우만 유효한 응답이 온 경우다.
					if(xhr.readyState == 4 && xhr.status == 200) {
						// 서버가 보낸 응답데이터 조회
						// 응답데이터로 HTML 컨텐츠 제작
						// HTML 컨텐츠로 화면의 특정 부분을 갱신
					}
				}

			- responseText
				서버가 보낸 응답데이터가 보관되어 있다.

			- responseXML
				서버가 보낸 XML 응답데이터가 보관되어 있다.		

		* 주요 메소드
			- new XMLHttpRequest()
				XMLHttpRequest객체를 생성한다.

			- open(method, url, async, username, password)
				XMLHttpRequest객체를 초기화시킨다.
				method   - 요청방식 "GET", "POST"
				ulr      - 요청URL
				async    - 동작방식 // true:비동기식 동작, false:동기식 동작
				username - 접속자 아이디
				password - 접속자 비밀번호	

			- send()
				서버로 요청을 보낸다.(GET방식 요청)

			- send(data)
				서버로 요청을 보낸다.(POST방식 요청)
				data는 서버로 보내는 요청파라미터다.
				data의 형태는 queryString의 형태다.
				사용예
					xhr.send("opt=title&keyword=자바&page=1")
			- setRequestHeader(name, value)
				서버로 POST방식의 요청을 보낼 때 사용된다.
				요청 헤더에 새로운 정보를 추가한다.
				요청바디부에 담겨서 전달되는 데이터의 컨텐츠 타입을 지정한다.
				사용예
					xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');



JSON(JavaScript Object Notation)
	- 자바스크립트의 객체, 배열의 표기법과 유사한 데이터 표기법
	- 경량의 데이터-교환 형식이다.
	- 경량의 데이터-표기법이다.
	
	- 특징
		* 사람이 읽고 쓰기 쉽다.
		* 기계(혹은 프로그램)가 분석하고, 생성하기 쉽다.
		* 프로그래밍 언어로부터 완전히 독립적이다.
		* 서로 다른 시스템간의 데이터 교환에 이상적인 데이터-교환 형식이다.

	- 표기형식
		* Object 표기법
			{"name":value, "name":value, "name":value}
			* name은 문자열만 가능하다.
			* name은 반드시 ""로 감싸야 한다.
			* value는 문자열, 숫자, 객체, 배열, true, false, null
			* 작성예
				public class Book [
					int no;
					String title;
					int price;
					boolean soldout;
					String event;
				}

				* Book객체에 책정보를 담고 JSON 표기법으로 변환한 경우
				{"no":10, "title":"이것이 자바다", "price":35000, "soldout":false, "event":null}

				public class Customer {
					String name;
					String tel;
					Car myCar;
				}
				public class Car {
					String name;
					int year;
					int distance;
				}
				* Car객체를 포함하고 있는 Customer객체를 JSON 표기법으로 변환한 경우
				{"name":"홍길동", "tel":"010-1111-1111", "myCar":{"name":"소나타", "year":2019, "distance":15000}}


		* Array 표기법
			* [value, value, value, value]
			* 값들의 순서화된 리스트다.
			* 작성예
				List<String> names = new ArrayList<String>();
				names.add("홍길동");
				names.add("김유신");
				* 문자열을 포함하고 있는 ArrayList를 JSON 표기법으로 변경
				["홍길동", "김유신"]

				public class IdolGroup {
					String name;
					List<String> members;
				}
				* 문자열과 List를 포함하고 있는 객체를 JSON 표기법으로 변경
				{"name":"블랙핑크", "members":["지수", "제니", "로제", "리사"]}

				List<Book> books = bookDao.getAllBooks();
				* Book객체가 여러 개 포함된 ArrayList를 JSON 표기법으로 변경
				[{"no":10, "title":"이것이 자바다", "price":35000, "soldout":false, "event":null},
				 {"no":10, "title":"이것이 자바다", "price":35000, "soldout":false, "event":null},
				 {"no":10, "title":"이것이 자바다", "price":35000, "soldout":false, "event":null}]


		* 자바 - JSON - 자바스크립트
		------------------------------------------------------------------------------------
		Java		JSON 표기법				JavaScript
		------------------------------------------------------------------------------------
		VO, Map	    ->	{"name":value, "name":value}	 ->	JSON.parse(json)	객체
		배열, List  ->	[value, value, value, value]	 ->	JSON.parse(json)	배열
		------------------------------------------------------------------------------------
		VO, Map	    <-	{"name":value, "name":value}	 <-	JSON.stringify(객체)	객체
		배열, List  <-	[value, value, value, value]	 <-	JSON.stringify(배열)	배열
		------------------------------------------------------------------------------------
		* 자바와 다른 시스템간에 데이터 교환이 필요한 경우
		  자바의 객체/Map/배열/List를 JSON 표기법의 텍스트로 변환해서 상호교환하는 경우가 많다.
		* 자바에서는 JSON관련 다양한 오픈소스 라이브러리가 있다.
		* 자바스크립트는 JSON.parse(), JSON.stringify()를 사용해서 JSON 텍스트와 자바스크립트의 객체/배열간의 변환을 지원한다.