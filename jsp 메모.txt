URL(Uniform Resource Locator)
	- 자원의 물리적인 위치를 나타내는 주소다.
	- 자원은 웹 프로그램(jsp, php 프로그램), html파일, 그림, 동영상 등
	- 클라이언트(웹브라우져)는 오직 URL로 웹서버(Tomcat)에 요청을 보낼 수 있다. 
	- 작성 예
		http://www.jhta.co.kr/board/qna/answer.jsp?page=3&no=132
	- URL의 구성
=================================================================================================================================
			구성요소
---------------------------------------------------------------------------------------------------------------------------------
http			프로토콜		웹브라우져와 웹 서버가 주고받는 메세지의 작성규칙의 이름을 나타낸다.
/www.jhta.co.kr		서버명		클라이언트의 요청을 처리할 서버프로그램이 실행중인 컴퓨터의 도메인명이나 ip주소로 나타낸다.		
/board/qna/answer.jsp	경로		클라이언트의 요청을 처리할 웹애플리케이션이 위치하고 있는 디렉토리와 파일명을 나타낸다.
page=3&no=132		쿼리스트링	클라이언트가 서버로 보내는 데이터를 나타낸다.
---------------------------------------------------------------------------------------------------------------------------------
* HTTP 메세지 작성규칙에 맞게 요청 메세지를 보낼것이다.
* www.jhta.co.kr컴퓨터야 요청메세지를 받아라.
* /board/qna/answer.jsp를 실행시켜서 나의 요청을 처리해주라.
* 나는 3페이지의 132번 글 정보를 보고싶다.


HTTP(HyperText Transfer Protocol)
	- web상에서 웹브라우저와 서버가 주고받는 메세지의 형식을 규정한 프로토콜이다.
	- 메세지 형식
		* 요청메세지
			- 클라이언트가 서버로 보내는 메세지

		* 응답메세지
			- 서버가 클라이언트로 보내는 메세지

		-------------------------------------------------------------------------
		구분		헤더부				바디부
		-------------------------------------------------------------------------
		요청메세지	요청라인				서버로 전송할 데이터
				 * 요청방식
				 * 요청 URL
				요청헤더정보
				 * 클라이언트에 대한 부가적인 정보
				 * OS, 브라우져, 국가, 언어코드
		-------------------------------------------------------------------------
		응답메세지	응답라인				컨텐츠(HTML, 그림, 동영상)
				 * 응답코드
				응답헤더정보
				 * 응답컨텐츠의 타입
				 * 응답컨텐츠의 길이
		-------------------------------------------------------------------------


JSP (Java Server Page)
	- 동적인 웹컨텐츠(html 컨텐츠)를 작성하는데 사용되는 자바의 표준 기술이다.
	- 요청을 처리하고, 응답을 제공하기 위한 기능을 제공하고 있다.
	- html, xml, json, 바이너리 데이터(그림, 영상, 압축파일) 등을 응답으로 제공가능하다.
	- 작성된 JSP를 실행하기 위해서는 반드시 Tomcat과 같은 웹 애플리케이션 서버가 필요하다.


WAS(Web Application Server : 웹애플리케이션 서버)
	- Servlet/JSP로 작성된 애플리케이션 프로그램을 실행시켜주는 서버 프로그램이다.
	- Tomcat, jBoss, webLogic, Jeus 등의 웹 애플리케이션 서버프로그램이 있다.
	- 웹애플리케이션을 실행하기 위해서는 웹서버에 해당 애플리케이션이 배포되어야한다.

JSP 구성요소
	- 지시어(디렉티브:Directive)
		* JSP 페이지에 대한 설정정보를 지정할 때 사용한다.
		* 형식
			<%@ page 속성="값" 속성="값" ... %>
				* JSP 페이지에 대한 설정정보를 지정한다.
				* 컨텐츠타입, 페이지인코딩방식, import할 자바클래스
				  에러페이지, 세션사용여부 등을 설정할 수 있다.

			<%@ include file="파일정보" %>
				* 다른 JSP 페이지를 현재 페이지에 포함시킨다.
	
			<%@ taglib 속성="값" 속성="값" ... %>
				* JSP 페이지에서 사용할 태그라이브러리를 지정한다.
	- 스크립틀릿(Scriptlet)
		* JSP 페이지에서 자바 코드를 실행할 때 사용하는 자바코드 블록이다.
		* 형식
			<%
			    자바코드;
			    자바코드;
			    (변수선언, 객체생성, 제어문/반복문 실행, 메소드 호출, ...)
			%>

	- 표현식(Expression)
		* 스크립틀릿에서 자바코드 실행의 결과로 획득된 값, 변수에 저장된 값을 출력결과(응답컨텐츠)에 포함시킨다.
		* 형식
			<%= 변수명 %>
			<%= 참조변수.메소드() %> // 반환값이 있는 메소드
	- 선언부(Declaration)
		* JSP 페이지의 스크립틀릿이나 표현식에서 사용할 수 있는 메소드를 작성할 때 사용한다.
		* 형식
			<%!
				public 리턴타입 메소드명(타입 변수명, 타입 변수명, ...) {
					수행문;
					수행문;
				}
			%>
	- 주석(Comment)
		* JSP 코드를 주석처리할 수 있다.
		* 형식
			<%--
				주석처리되는 내용 ...
				주석처리되는 내용 ...
			--%>


JSP 기본객체
	- 요청객체
		* HttpServletRequest의 구현객체다.
		* request객체가 참조한다.
		* 클라이언트가 서버로 보낸 요청메세지정보를 제공한다.
		* jsp에서는 request 변수에 저장되어 있다.
		* 주요 메소드
			- 요청파라미터 관련
				void setCharacterEncoding(String encoding)
				String getParameter(String name)
				String[] getPatameterValues(String name)

			- 요청메세지 관련
				String getMethod()
				String getContextPath()
				String getRequestURI()

			- 클라이언트 관련
				String getRemoteAddr()
			
			- 요청헤더 관련
				String getHeader(String name)

	- 응답객체
		* HttpServletResponse의 구현객체다.
		* response변수가 참조한다.
		* 서버가 클라이언트로 보내는 응답메세지 정보를 담는다.
		* jsp에서는 response 변수에 저장되어 있다.
		* 주요 메소드
			- 리다이렉트 관련
				void sendRedirect(String location)

			- 응답컨텐츠 관련
				void setContentType(String contentType)
				void setContentLength(long len)

			- 응답헤드 관련
				void setHeader(String name, String value)

	- 세션객체
		* HttpSession의 구현객체다.
		* session변수가 참조한다.
		* 클라이언트(브라우져)마다 하나씩 생성되는 객체다.
		* 클라이언트의 개인적인 정보를 저장할 수 있다.

	- 어플리케이션 객체
		* ServletContext의 구현객체다.
		* application변수가 참조한다.
		* 웹애플리케이션 프로젝트 당 하나씩 생성되는 객체다.
		* 웹 서버가 시작되면 생성되고, 웹서버가 중단될 때까지 유지된다.
		* 모든 서블릿, 모든 JSP, 모든 클라이언트가 공유하는 값을 저장할 수 있다.
		* 주요 메소드
			String getInitParameter(String name)
				- web.xml에 설정된 초기화 파라미터값을 반환한다.

			String getRealPath(String path)
				- 웹 애플리케이션내의 특정 경로에 해당하는 시스템상의 실제 경로를 반환한다.

			URL getResource(String path)
				- 웹 애플리케이션내의 특정 경로에 해당하는 시스템상의 실제 경로를 URL객체로 반환한다.

			InputStream getResourceAsStream(String path)	
				- 웹 애플리케이션내의 특정 경로에 해당하는 시스템상의 실제 자원을 읽어올 수 있는 스트림을 반환한다.

	- 페이지컨텍스트 객체
		* PageContext의 구현객체다.
		* pageContext변수가 참조한다.
		* JSP 페이지마다 하나씩 생성되는 객체다.
		* JSP 페이지에 대한 정보를 담고 있다.
		* 다른 기본객체를 조회하는 기능이 제공된다.
		* 주요 메소드
			HttpServletRequest getRequest()
				- 해당 jsp 실행 시 전달받은 요청객체를 반환한다.

			HttpServletResponse getResponse()
				- 해당 jsp 실행 시 전달받은 응답객체를 반환한다.

			HttpSession getSession()
				- 해당 jsp의 실행을 요청한 브라우져와 연관된 세션객체를 반환한다.

			ServletContext getServletContext()
				- 해당 jsp가 포함된 웹프로젝트와 관련된 애플리케이션객체를 반환한다.

			ServletConfig getServletConfig()
				- 해당 jsp와 직접 연관된 Config객체를 반환한다.

			JspWriter getOut()
				- 해당 jsp의 실행을 요청한 클라이언트로 html 컨텐츠를 출력하는 스트림을 반환한다.

			Exception getException()
				- 오류 정보를 담고 있는 예외객체를 반환한다.

			Object getPage()
				- 현재 실행중인 JSP객체 자기자신을 반환한다.

			* 위의 메소드를 jsp에서 실제로 사용할 가능성은 0%다.
			* 위의 메소드를 실행해서 획득되는 객체는 jsp 실행 시 이미
			  request, response, session, application, config, out, exception, page에 저장되어 있기 때문이다.
	
	- 서블릿컨피그 객체
		* ServletConfig의 구현객체다.
		* config변수가 참조한다.
		* 서블릿객체마다 하나씩 생성되는 객체다.
		* 해당 서블릿객체만 사용할 설정정보를 담고 있다.

HTTP 요청 방식
	* 클라이언트가 서버로 데이터(요청파라미터)를 전송하는 방식에 따라서 구분한 것이다.
	- GET 방식
		* 요청URL 뒤에 ?와 함께 요청파라미터를 붙여서 전송하는 것이다.
		* 형식
			http://서버명/경로/xxx.jsp?name=value&name=value&name=value
		* 서버로 전달되는 데이터 형식
			name=value&name=value&name=value
		* 특징
			<form>태그를 사용하지 않고도 요청파라미터값을 서버로 전송할 수 있다.
			<a>태그의 href에 링크주소를 작성할 때 서버로 전송할 데이터를 쿼리스트링형태로 지정할 수 있다.
			대용량의 데이터를 전달할 수 없다.
			첨부파일 등을 전달할 수 없다.
			서버로 전송되는 값이 URL에 그대로 노출되기 때문에 보안성이 취약하다.
	
	- POST 방식
		* 요청메세지의 body부에 요청파라미터가 포함되어서 서버로 전송된다.
		* <form method="post">로 지정했을 때만 폼입력값들이 POST 방식으로 전송된다.
		* 서버로 전달되는 데이터 형식
			name=value&name=value&name=value
		* 특징
			서버로 전송하는 데이터의 크기에 제한이 없다.
			첨부파일을 서버로 전송할 수 있다.
			서버로 전송되는 값이 URL에 노출되지 않기 때문에 GET방식보다 보안성이 높다.

속성과 스코프(영역)

속성
	- 속성은 값으로 이용되는 객체다.
	- 속성은 <속성이름, 객체>의 형태를 갖는다.
	- pageContext, HttpServletRequest, HttpSession, ServletContext에 저장되는 객체다.
	- 속성은 위의 4종류의 객체 중 어느 객체에 저장되느냐에 따라서 지정된 속성에 대한 이용범위 및 생존시간이 달라진다.
	* 이것을 스코프라고 한다.
	- 속성관련 주요 메소드
		void setAttribute(String name, Object Value)
			지정된 이름으로 객체를 저장한다.

		Object getAttribute(Sring name)
			지정된 이름으로 저장된 객체를 반환한다.

		void removeAttribute(String name)
			지정된 이름으로 저장된 객체를 삭제한다.

스코프
	- 속성을 공유할 수 있는 유효범위를 말한다.
	- 스코프의 종류
		* Page Scope
			- PageContext에 저장되는 속성이 갖는 유효범위다.
			- 같은 JSP안에서만 속성이 공유된다.

		* Request Scope
			- HttpServletRequest에 저장되는 속성이 갖는 유효범위다.
			- 클라이언트의 요청을 처리하는 동안 속성이 공유된다.
			- 하나의 요청을 처리하기 위해서 2개 이상의 JSP가 사용되는 경우 여러 JSP에서 속성이 공유된다.
			- 응답이 완료되면 요청객체가 소멸되기 때문에 저장된 속성도 사라진다.
			- Model2 개발방식에서 가장 많이 사용되는 유효범위다.
				
		* Session Scope
			- HttpSession에 저장되는 속성이 갖는 유효범위다.
			- HttpSession은 브라우저마다 하나씩 생성되기 때문에 해당 클라이언트가 접속하는 모든 JSP 페이지에서 속성이 공유된다.
			- 다른 브라우저로 접속하는 경우 절대로 접근할 수 없다.
			- 브라우저를 종료하거나 로그아웃하면 기존 세션객체에 접근할 수 없다.
			- 로그인처리, 장바구니, 최근 본 상품 등 개인화된 정보를 저장하기 위한 용도로 사용되는 유효범위다.

		* Application Scope
			- ServletContext에 저장되는 속성이 갖는 유효범위다.
			- ServletContext는 웹서버에 배포된 웹애플리케이션 프로젝트당 하나씩 생성되며, ServletContext에 저장된 속성은
			  모든 Servlet, 모든 JSP, 모든 필터, 모든 리스너, 모든 클라이언트가 공유할 수 있다.


로그인
	- 인증된 사용자의 정보를 웹서버의 세션객체에 저장하는 것이다.
	- 사용자정보를 필요로 하는 JSP 실행 시 추가적인 사용자 정보 입력없이 세션에 저장된 사용자정보로 요청을 처리하게 하는 것이 목적이다.
	- 로그인할 때만 클라이언트에서 서버로 전달되는 개인정보를 암호화해서 보호하면, 그 이후에는 클라이언트와 서버사이에 사용자정보를 주고받을 필요가 없어진다.
	- 사용자정보가 서버의 세션에 보관되기 때문에 서버를 점거하지 않는 이상 사용자정보를 획득할 수 없다.

로그아웃
	- 인증된 사용자 정보가 보관된 세션객체를 폐기하는 것이다.


<form>태그의 enctype 속성
	- 폼의 입력값을 서버로 전송하는 방식을 지정하는 속성이다.
	- <form method="요청방식"
		action="폼입력값의 전송방식

	- enctype의 대표적인 속성값
		* enctype="application/x-www-form-urlencoded"
		- enctype의 기본값이다.
		- enctype을 설정하지 않으면 이 값으로 자동 지정된다.
		- 폼 입력값을 쿼리스트링 형태로 만들어서 요청 메세지의 몸체에 포함시켜서 서버로 전송한다.
		- 첨부파일이 없는 경우에 사용한다.
		- 예)
			username=홍길동&userid=hong&userpwd=zxcv1234
		
		* enctype="multipart/form-data"
		- 폼 입력값에 첨부파일이 있는 경우에 사용한다.
		- 요청방식은 "post"방식으로 지정해야한다.
		- 요청메세지 헤더정보의 컨텐츠 타입이 아래와 같이 지정된다.
			Content-Type: multipart/form-data; boundary=----WebKitFormBoundarymvP1HiaHcLMASUN9
		- boundary에 지정되어 있는 문자열을 전송되는 폼 입력값을 구분하는 구분자로 이용한다.
		- 예)
			----WebKitFormBoundarymvP1HiaHcLMASUN9
			Content-Disposition; form-data; name="title"
			회사규정집 요약본

			----WebKitFormBoundarymvP1HiaHcLMASUN9
			Content-Disposition; form-data; name="upfile"; filename="summary.txt"
			Content-Type: text/plain

			주식회사 중앙HTA학원규정집 파일 내용 내용 내용 내용 내용
			----WebKitFormBoundarymvP1HiaHcLMASUN9--

		- 요청객체의 getParameter(String name) 메소드로 폼 입력값을 가져올 수 없다.
		- 파일업로드 처리를 도와주는 별도의 라이브러리가 필요하다.
			cos.jar
			commons-fileupload.jar


MIME(Multipurpose Internet Mail Extensions)타입
	- 클라이언트에게 전송된 컨텐츠의 타입을 알려주기 위한 용도로 사용된다.
	- 구조
		type/subtype
		* type은 카테고리를 나타낸다.
		* subtype은 카테고리에 속하는 개별타입을 나타낸다.
		예) text/plain, text/css, text/html, text/xml
		    image/jpg, image/png, image/bmp

	- 주요 카테고리
	---------------------------------------------------------------------------------------------------
	타입		설명				서브타입 예
	---------------------------------------------------------------------------------------------------
	text		텍스트를 포함하는 모든 문서	text/plain, text/html,  text/css,  text/javascript
	image		모든 종류의 이미지		image/gif,  image/png,  image/bmp, image/jpeg
	audio		모든 종류의 오디오 파일		audio/midi, audio/ogg,  audio/wav, audio/mp3
	video		모든 종류의 비디오 파일		video/mp4,  video/webm, video/ogg, video/mpeg
	application	모든 종류의 이진데이터		application/octet-stream, application/pdf,
							application/vnd.mspowerpoint
	---------------------------------------------------------------------------------------------------
	* 특정 서브타입을 확정지을 수 없는 경우
		텍스트 문서인 경우에는 text/plain
		이진 데이터인 경우에는 application/octet-stream이 사용되어야 한다.

	- 웹 개발에서 자주 사용되는 MIME 타입
	application/octet-stream
		이진파일에 대한 기본값
		특정 서브타입을 확정할 수 없는 이진파일을 의미한다.

	text/plain
		텍스트파일에 대한 기본값
		
	text/css
		CSS StyleSheet 파일에 대한 MIME타입

	text/html
		모든 HTML 컨텐츠에 대한 MIME 타입

	multipart/form-data
		브라우저에서 서버로 폼 입력내용을 서버로 전송할 때 사용된다.
		멀티파트 타입은 ---으로 시작하는 문자열로 구분되는 입력값들로 구성된다.
		첨부파일이 업로드되는 폼에서 사용된다.

	text/xml, application/xml
		모든 XML 컨텐츠에 대한 MIME 타입		

	text/json, application/json	
		모든 JSON 컨텐츠에 대한 MIME 타입


HTTP 응답코드
	1xx
		정보 응답
		서버가 요청을 받았고, 요청을 처리중이다.
		100 Continue
		101 Switching Protocols 서버에서 프로토콜이 변경할 것임을 알림
	2xx
		성공 응답
		200 OK			요청이 성공적으로 처리되었음
		204 No Content		요청이 성공적으로 처리되었지만, 응답으로 보낼 컨텐츠는 없음
	3xx
		리다이렉션 메세지 응답
		302 Found		클라이언트의 요청이 변경되었음을 응답으로 보낸다.
		307 Temporary Redirect	response.sendRedirect(path)를 이용할 때 응답
	4xx
		클라이언트 에러 응답
		401 Unauthorized	인증되지 않은 클라이언트의 요청임
		403 Forbidden		필요한 접근권한을 가지고 있지 않음
		404 Not Found		요청한 리소스를 찾을 수 없음
		405 Method Not Allowed	요청한 방식(get, post, put, delete)을 서버가 허용하지 않음
	5xx
		서버 에러 응답
		500 Internal Server Error 서버 내부 에러가 발생함 (클라이언트 요청 처리중 예외가 발생함)
		503 Service Unavailable   서버가 요청을 처리할 준비가 되어 있지 않음



웹프로젝트 개발환경 구성하기
	1. JDK 설치
	2. 시스템 환경변수에
		이름 : JAVA_HOME
		값   : C:\Program Files\Java\jdk1.8.0_241 등록
	3. Tomcat 설치
		http://tomcat.apache.org -> Download
					 -> Tomcat 9 -> 32-bit/64-bit Windows Service Installer 다운받고 설치
	4. 이클립스 설치
		Eclipse IDE for Enterprise Java Developers
	5. 워크스페이스 폴더 생성
	6. 문자 인코딩방식 utf-8로 변경
	   eclipse -> window -> preference -> General workspace -> Text file Encoding => utf-8
					   -> web -> css  -> encoding => utf-8
					          -> html -> encoding => utf-8
						  -> jsp  -> encoding => utf-8
	7. 이클립스와 Tomcat 연동시키기
	   eclipse -> window -> preference -> server -> Runtime Environment -> add 버튼 클릭 => 3번에서 설치한 Tomcat 등록
	8. 웹 프로젝트 생성
	   eclipse -> file -> new -> Dynamic Web Project 선택 -> 프로젝트명 지정 -> Finish
	9. 웹 프로젝트를 배포할 Tomcat 서버 생성하기
	   Server탭 -> create a new server 선택 -> 7번에서 이클립스와 연동시킨 톰캣 선택 -> Finish
	10. 웹 프로젝트 Tomcat 서버에 배포하기
	   Server탭 -> Tomcat v9.0선택 -> 마우스 우측버튼 클릭 -> Add and Remove -> 왼쪽창의 프로젝트를 Add버튼을 이용해서 오른쪽 창에 추가한다.
	11. Tomcat 서버 start & stop


웹서버에 URL 요청보내기
	프로토콜		http://
	서버명		localhost
	경로		/myweb/first.jsp	   